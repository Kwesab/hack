import { jsPDF } from "jspdf";

interface DocumentData {
  studentName: string;
  studentId: string;
  documentType: string;
  subType?: string;
  graduationDate?: string;
  degreeProgram?: string;
  gpa?: string;
  classification?: string;
  issueDate: string;
  requestId: string;
}

class PDFGeneratorService {
  generateTranscript(data: DocumentData): Buffer {
    const doc = new jsPDF();

    // Header
    doc.setFillColor(0, 32, 91); // TTU Navy
    doc.rect(0, 0, 210, 40, "F");

    // TTU Logo and Header (white text)
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont("helvetica", "bold");
    doc.text("TAKORADI TECHNICAL UNIVERSITY", 105, 15, { align: "center" });

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text("P.O. Box 256, Takoradi, Ghana", 105, 25, { align: "center" });
    doc.text("Tel: +233-31-2022297 | Email: info@ttu.edu.gh", 105, 32, {
      align: "center",
    });

    // Document Title
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text("OFFICIAL TRANSCRIPT", 105, 55, { align: "center" });

    // Student Information
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text("STUDENT INFORMATION", 20, 75);
    doc.setLineWidth(0.5);
    doc.line(20, 77, 190, 77);

    doc.text(`Name: ${data.studentName}`, 20, 90);
    doc.text(`Student ID: ${data.studentId}`, 20, 100);
    doc.text(
      `Program: ${data.degreeProgram || "Bachelor of Science in Computer Science"}`,
      20,
      110,
    );
    doc.text(`Graduation Date: ${data.graduationDate || "July 2024"}`, 20, 120);

    // Academic Record
    doc.text("ACADEMIC RECORD", 20, 140);
    doc.line(20, 142, 190, 142);

    // Sample course table
    doc.setFontSize(10);
    doc.text("YEAR 1 - SEMESTER 1", 20, 155);
    doc.text("Course Code", 20, 165);
    doc.text("Course Title", 50, 165);
    doc.text("Credit Hours", 120, 165);
    doc.text("Grade", 150, 165);
    doc.text("GPA", 170, 165);

    // Sample courses
    const courses = [
      ["CS 101", "Introduction to Programming", "3", "A", "4.0"],
      ["MATH 101", "Calculus I", "3", "B+", "3.5"],
      ["ENG 101", "Communication Skills", "2", "A-", "3.7"],
      ["PHY 101", "Physics for Engineers", "3", "B", "3.0"],
    ];

    let yPos = 175;
    courses.forEach((course) => {
      doc.text(course[0], 20, yPos);
      doc.text(course[1], 50, yPos);
      doc.text(course[2], 120, yPos);
      doc.text(course[3], 150, yPos);
      doc.text(course[4], 170, yPos);
      yPos += 10;
    });

    // Semester GPA
    doc.setFont("helvetica", "bold");
    doc.text(`Semester GPA: ${data.gpa || "3.55"}`, 20, yPos + 10);

    // Overall Summary
    doc.text("OVERALL SUMMARY", 20, yPos + 30);
    doc.line(20, yPos + 32, 190, yPos + 32);
    doc.setFont("helvetica", "normal");
    doc.text(`Cumulative GPA: ${data.gpa || "3.55"}`, 20, yPos + 45);
    doc.text(
      `Classification: ${data.classification || "Second Class Upper"}`,
      20,
      yPos + 55,
    );

    // Footer
    doc.setFontSize(8);
    doc.text(
      "This is an official document generated by TTU DocPortal",
      105,
      280,
      { align: "center" },
    );
    doc.text(`Document ID: ${data.requestId}`, 105, 285, { align: "center" });
    doc.text(`Generated on: ${data.issueDate}`, 105, 290, { align: "center" });

    return Buffer.from(doc.output("arraybuffer"));
  }

  generateCertificate(data: DocumentData): Buffer {
    const doc = new jsPDF("landscape");

    // Decorative border
    doc.setLineWidth(3);
    doc.setDrawColor(0, 32, 91); // TTU Navy
    doc.rect(10, 10, 277, 190);

    doc.setLineWidth(1);
    doc.setDrawColor(173, 216, 230); // Light blue
    doc.rect(15, 15, 267, 180);

    // Header
    doc.setTextColor(0, 32, 91);
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.text("TAKORADI TECHNICAL UNIVERSITY", 148.5, 40, { align: "center" });

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text("Takoradi, Ghana", 148.5, 50, { align: "center" });

    // Certificate Title
    doc.setFontSize(20);
    doc.setFont("helvetica", "bold");
    doc.text("CERTIFICATE OF COMPLETION", 148.5, 75, { align: "center" });

    // Certificate Body
    doc.setFontSize(14);
    doc.setFont("helvetica", "normal");
    doc.text("This is to certify that", 148.5, 95, { align: "center" });

    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text(data.studentName.toUpperCase(), 148.5, 110, { align: "center" });

    doc.setFontSize(14);
    doc.setFont("helvetica", "normal");
    doc.text("has successfully completed the requirements for", 148.5, 125, {
      align: "center",
    });

    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text(
      data.degreeProgram || "Bachelor of Science in Computer Science",
      148.5,
      140,
      { align: "center" },
    );

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text(`Student ID: ${data.studentId}`, 148.5, 155, { align: "center" });
    doc.text(
      `Date of Graduation: ${data.graduationDate || "July 2024"}`,
      148.5,
      165,
      {
        align: "center",
      },
    );

    // Signature area
    doc.text("____________________", 80, 185);
    doc.text("Registrar", 80, 190);

    doc.text("____________________", 220, 185);
    doc.text("Vice-Chancellor", 220, 190);

    // Footer
    doc.setFontSize(8);
    doc.text(`Document ID: ${data.requestId}`, 148.5, 200, { align: "center" });
    doc.text(`Generated on: ${data.issueDate}`, 148.5, 205, {
      align: "center",
    });

    return Buffer.from(doc.output("arraybuffer"));
  }

  generateAttestation(data: DocumentData): Buffer {
    const doc = new jsPDF();

    // Header
    doc.setFillColor(0, 32, 91);
    doc.rect(0, 0, 210, 40, "F");

    doc.setTextColor(255, 255, 255);
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text("TAKORADI TECHNICAL UNIVERSITY", 105, 15, { align: "center" });

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text("Office of the Registrar", 105, 25, { align: "center" });
    doc.text("P.O. Box 256, Takoradi, Ghana", 105, 32, { align: "center" });

    // Document Title
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text("LETTER OF ATTESTATION", 105, 55, { align: "center" });

    // Date
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text(`Date: ${data.issueDate}`, 160, 70);

    // Body
    doc.setFontSize(12);
    doc.text("TO WHOM IT MAY CONCERN:", 20, 90);

    const bodyText = [
      `This is to certify that ${data.studentName} with Student ID ${data.studentId}`,
      `was a bonafide student of Takoradi Technical University and has successfully`,
      `completed the requirements for ${data.degreeProgram || "Bachelor of Science in Computer Science"}.`,
      "",
      `The student graduated on ${data.graduationDate || "July 2024"} with a cumulative`,
      `GPA of ${data.gpa || "3.55"} and achieved ${data.classification || "Second Class Upper"} classification.`,
      "",
      "This attestation is issued for official purposes and is valid for all",
      "legal and administrative purposes.",
      "",
      "We confirm that all information provided is accurate and true to the",
      "best of our knowledge.",
    ];

    let yPos = 110;
    bodyText.forEach((line) => {
      doc.text(line, 20, yPos);
      yPos += 8;
    });

    // Signature
    doc.text("Yours faithfully,", 20, yPos + 20);
    doc.text("____________________", 20, yPos + 40);
    doc.text("University Registrar", 20, yPos + 50);
    doc.text("Takoradi Technical University", 20, yPos + 60);

    // Official Seal Area
    doc.setDrawColor(0, 0, 0);
    doc.circle(160, yPos + 35, 15);
    doc.setFontSize(8);
    doc.text("OFFICIAL SEAL", 160, yPos + 35, { align: "center" });

    // Footer
    doc.setFontSize(8);
    doc.text(`Document ID: ${data.requestId}`, 105, 280, { align: "center" });
    doc.text(
      "This document is computer generated and valid without signature",
      105,
      285,
      {
        align: "center",
      },
    );

    return Buffer.from(doc.output("arraybuffer"));
  }

  async generateDocumentPDF(
    documentType: string,
    documentData: DocumentData,
  ): Promise<Buffer> {
    switch (documentType.toLowerCase()) {
      case "transcript":
        return this.generateTranscript(documentData);
      case "certificate":
        return this.generateCertificate(documentData);
      case "attestation":
        return this.generateAttestation(documentData);
      default:
        throw new Error(`Unsupported document type: ${documentType}`);
    }
  }
}

export const pdfGeneratorService = new PDFGeneratorService();
